#!/bin/bash

#
# 'coding' - maxcode@maxwellspangler.com
#
# Launch a terminal in a pre-defined display position with a pre-defined size
# and adjust for different display hardware configurations

VERSION="1.3.0"
VERSION_DATE="2023-0110"

function available_display_configs {
  #
  if [[ -r $CONFIG_FILE ]]
  then
    echo "Available monitor configurations:"
    echo
    grep '^monitor-config:' $CONFIG_FILE
    MCONFIG_LIST=$(grep '^monitor-config:' $CONFIG_FILE)
    for EACH_MCONFIG
    do
      echo "Monitor config: $EACH_MCONFIG"
    done
  fi
}

function usage {
  echo
  echo "coding  $VERSION  $VERSION_DATE"
  echo
  echo "Syntax: coding <windowoption>"
  echo
  echo "Launch gnome-terminals in specific positions and sizes based on"
  echo "configuration rules in \$HOME/.coding.conf"
  echo
  echo "Example: 'right' launches a medium size window on the right size"
  echo "of the central monitor."
  echo
  available_display_configs
}

function get_resolution {

  RESOLUTION=$(xdpyinfo | grep dimensions | awk '{print $2}')

  # Remove vertical resolution 'x1200'
  HORIZONTAL_RESOLUTION=${RESOLUTION%x*}

  if [[ ! -z $DEBUG ]]
  then
    echo "Resolution: $RESOLUTION, Horizontal Resolution $HORIZONTAL_RESOLUTION"
  fi
}

function scan_for_monitor_config {
  # $1 is an exact horizontal x vertical resolution or horizontal x 9999 string

  DISPLAY_LINE_COUNT=$(grep '^monitor-config:' $CONFIG_FILE | egrep -v "^#" | grep ${1}| wc -l)

  if [[ $DISPLAY_LINE_COUNT -gt 0 ]]
  then
    DISPLAY_LINE=$(grep '^monitor-config:' $CONFIG_FILE | egrep -v "^#" | grep ${1})
    if [[ ! -z $DEBUG ]]
    then
      echo "Monitor config is |$DISPLAY_LINE|"
    fi

    POSITION_RULE=$(echo $DISPLAY_LINE | awk '{print $2}')
    if [[ ! -z $DEBUG ]]
    then
      echo "Position rule is |$POSITION_RULE|"
    fi
  fi
}

# Using display resolution, try to find a monitor-config line for the resolution
function find_monitor_config {
  POSITION_RULE=""
  # Try getting exact horizontal x vertical resolution config
  if [[ ! -z $DEBUG ]]
  then
    echo "Looking for monitor-config match horizontal x vertical resolution."
  fi

  scan_for_monitor_config $RESOLUTION
  if [[ $POSITION_RULE == "" ]]
  then
    if [[ ! -z $DEBUG ]]
    then
      echo "Looking for monitor-config horizontal match only."
    fi
    # Now try getting horizontal x 9999 resolution config
    scan_for_monitor_config "${HORIZONTAL_RESOLUTION}x9999"
  else
    echo "Error: Can't find a monitor-config line in $CONFIG_FILE for resolution $RESOLUTION"
    available_display_configs
    exit 1
  fi
}

function check_for_config {

  POSITION_COUNT=$(egrep "^${POSITION_RULE}" $CONFIG_FILE | egrep -v "^#" | grep "\"${CODING_WINDOW}" | wc -l)

  if [[ $POSITION_COUNT -gt 0 ]]
  then
    if [[ ! -z $DEBUG ]]
    then
      echo "Found position rules to apply"
    fi
  else
    echo "Error: No position rules to apply for |$POSITION_RULE|."
    echo
    usage
    exit 1
  fi
}

function launch_terminal {
  if [[ ! -z $DEBUG ]]
  then
    grep $POSITION_RULE $CONFIG_FILE | egrep -v "^#" | grep "\"${CODING_WINDOW}"
  fi

  LAUNCH_GEO=$(egrep "^${POSITION_RULE}" $CONFIG_FILE | egrep -v "^#" | grep "\"${CODING_WINDOW}" | cut -d " " -f3- | sed 's/"//g' | sed 's/  //g')

  if [[ ! -z $DEBUG ]]
  then
    echo "Launching gnome-terminal with geometry |$LAUNCH_GEO|"
  fi

  # Allow user to set environment variable to an alternate terminal
  if [[ -z $CODING_TERMINAL ]]
  then
    CODING_TERMINAL="gnome-terminal"
  fi

  # Construct the command that will launch with parameters
  LAUNCH_CMD="$CODING_TERMINAL $LAUNCH_GEO &"

  # LAUNCH!
  eval $LAUNCH_CMD
}

#
# Main code
#

# Required
CONFIG_FILE=~/.coding.conf

# Global variables
RESOLUTION=""
HORIZONTAL_RESOLUTION=""
DISPLAY_LINE=""
POSITION_RULE=""

# Only used to catch if user wants help, offer this before any real work
PARAM=${1:-"null"}

if [[ $PARAM == "help" || $PARAM == "usage" || $PARAM == "-h" || $PARAM == "--help" || $PARAM == "-help" ]]
then
	usage
	exit 0
else
  CODING_WINDOW="$PARAM"
fi

# We require a config file, so check for that and bail out if not available
if [[ ! -r $CONFIG_FILE ]]
then
  if [[ ! -f $CONFIG_FILE ]]
  then
    echo "Error: Config file $CONFIG_FILE does not exist."
  else
    echo "Error: Config file $CONFIG_FILE is not readable."
  fi
  exit 1
fi

# Identify the monitor configuration via the whole desktop resolution
get_resolution

# Attempt to find a monitor-config rule in the config file for this resolution
find_monitor_config

# Do we have rules to position windows for this display configuration?
check_for_config

# If we do, launch a gnome-terminal
launch_terminal
